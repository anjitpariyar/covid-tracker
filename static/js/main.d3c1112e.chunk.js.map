{"version":3,"sources":["component/card/Cards.jsx","component/api/index.js","component/chart/Chart.jsx","component/countryPicker/Country.jsx","component/Footer.jsx","App.js","serviceWorker.js","index.js","App.module.css"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","xs","md","component","Card","cx","CardContent","Typography","color","gutterBottom","variant","end","value","separator","decimal","duration","Date","toDateString","URL","fetchData","country","a","changeUrl","axios","get","console","log","fetchDailyData","modifyData","map","dailyData","total","date","reportDate","fetchCountry","countries","name","Chart","useState","setDailyData","useEffect","fetchMyAPI","lineChart","labels","datasets","label","borderColor","backgroundColor","fill","barChart","option","title","display","text","Country","handleCountryChange","fetchCountries","setFetchCountries","fetchCountries__func","FormControl","InputLabel","htmlFor","NativeSelect","labelid","id","onChange","e","target","defaultValue","i","key","Footer","href","App","state","setState","this","styles","main_part","Container","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.d3c1112e.chunk.js","sourcesContent":["import React,{ useState, useEffect }from 'react'\r\nimport { Card, CardContent, Typography , Grid } from '@material-ui/core'\r\nimport styles from './Cards-module.css'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames/bind'\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n     if (!confirmed) {\r\n          return 'Loading...';\r\n     }\r\n\r\n     return (\r\n          <div className={\"container\"}>\r\n               <Grid container spacing={3} justify=\"flex-start\" >\r\n                    <Grid item xs={4} md={3} component={Card} className={cx(\"card\")} >\r\n                         <CardContent>\r\n                              <Typography color=\"textSecondary\" gutterBottom className={cx(\"card__title\", \"card__infected\")}>\r\n                                   Infected\r\n                               </Typography>\r\n                              <Typography variant=\"h5\">\r\n                                   <CountUp end={confirmed.value}\r\n                                        separator=\",\"\r\n                                        decimal=\",\"\r\n                                        duration={3}\r\n                                   />\r\n                              </Typography>\r\n                              <Typography color=\"textSecondary\">\r\n                                   {  new Date(lastUpdate).toDateString()}\r\n                              </Typography>\r\n                              <Typography variant=\"body2\" component=\"p\">\r\n                                   Number of active cases of COVID-19.\r\n                              </Typography>\r\n                         </CardContent>\r\n                    </Grid>\r\n                    <Grid item xs={4} md={3} component={Card} className={cx(\"card\")} >\r\n                         <CardContent>\r\n                              <Typography color=\"textSecondary\" gutterBottom className={cx(\"card__title\", \"card__recovered\")}>\r\n                                   Recovered\r\n                              </Typography>\r\n                              <Typography variant=\"h5\">\r\n                                   <CountUp end={recovered.value}\r\n                                        separator=\",\"\r\n                                        decimal=\",\"\r\n                                        duration={2}\r\n                                   />     \r\n                              </Typography>\r\n                              <Typography color=\"textSecondary\"> \r\n                                   {new Date(lastUpdate).toDateString()}     \r\n                              </Typography>\r\n                              <Typography variant=\"body2\" component=\"p\">\r\n                                   Number of recoveries from COVID-19.\r\n                              </Typography>\r\n                         </CardContent>\r\n                    </Grid>\r\n                    <Grid item xs={4} md={3} component={Card} className={cx(\"card\")}  >\r\n                         <CardContent>\r\n                              <Typography color=\"textSecondary\" gutterBottom className={cx(\"card__title\", \"card__death\")}>\r\n                                   Deaths\r\n                              </Typography>\r\n                              <Typography variant=\"h5\">\r\n                                   <CountUp end={deaths.value}\r\n                                        separator=\",\"\r\n                                        decimal=\",\"\r\n                                        duration={1}\r\n                                   />\r\n                                   \r\n                              </Typography>\r\n                              <Typography color=\"textSecondary\">   \r\n                                   {new Date(lastUpdate).toDateString()}\r\n                              </Typography>\r\n                              <Typography variant=\"body2\" component=\"p\">\r\n                                   Number of deaths caused by COVID-19.\r\n                              </Typography>\r\n                         </CardContent>\r\n                    </Grid>\r\n               </Grid>\r\n          </div>\r\n     );\r\n};\r\n\r\nexport default Cards;","import axios from 'axios';\r\nimport { NativeSelect, FormControl } from '@material-ui/core'\r\nconst URL = \"https://covid19.mathdro.id/api\";\r\n\r\nconst fetchData = async (country)=>{\r\n     let changeUrl = URL;\r\n     if(country)\r\n          changeUrl= `${URL}/countries/${country}`\r\n         \r\n     try{\r\n          const { data: {confirmed, recovered, deaths, lastUpdate} }= await axios.get(changeUrl);\r\n          return { confirmed, recovered, deaths, lastUpdate }\r\n     }catch(error){\r\n          console.log('fetch api isnot working')\r\n     }\r\n}\r\n\r\nconst fetchDailyData = async()=>{\r\n     try{\r\n          const { data } = await axios.get(`${URL}/daily`)\r\n          const modifyData = data.map((dailyData) => ({\r\n               confirmed:dailyData.confirmed.total,\r\n               deaths: dailyData.deaths.total,\r\n               date: dailyData.reportDate,\r\n          }))\r\n          // console.log(modifyData)\r\n          return modifyData;\r\n     }\r\n     catch(error){\r\n          console.log(\"not working bruh\");\r\n     }\r\n}\r\n\r\nconst fetchCountry = async()=>{\r\n     try{\r\n          const {data:{countries} }= await axios.get(`${URL}/countries`)\r\n          // console.log(countries)\r\n          return (countries.map((country)=>country.name))\r\n     }\r\n     catch{\r\n          console.log('bruh!!');\r\n     }\r\n}\r\n\r\n\r\nexport {\r\n     fetchData,\r\n     fetchDailyData,\r\n     fetchCountry\r\n}\r\n\r\n \r\n//  export default fetchDataDaily \r\n\r\n","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport { fetchDailyData } from '../api';\r\n\r\nimport styles from './Chart-module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths} , country, value}) => {\r\n\r\n     const [dailyData, setDailyData] = useState({});\r\n     useEffect(() => {\r\n          const fetchMyAPI = async () => {\r\n               setDailyData(await fetchDailyData());\r\n          };  \r\n          fetchMyAPI();\r\n     }, [ ] );\r\n    \r\n     \r\n     const lineChart = (\r\n\r\n          dailyData[0] ? (\r\n               <Line\r\n                    data={{\r\n                         labels: dailyData.map(({ date }) => date),\r\n                         datasets: [ {\r\n                              data: dailyData.map((data) => data.deaths),\r\n                              label: 'Deaths',\r\n                                   borderColor: '#9e4a4a',\r\n                                   backgroundColor: 'rgba(158, 74, 74, 0.42)',\r\n                              fill: true,\r\n                         },\r\n                              {\r\n                                   data: dailyData.map((data) => data.confirmed),\r\n                                   label: 'Infected',\r\n                                   borderColor: '#4a8b9e',\r\n                                   backgroundColor: 'rgba(74, 139, 158, 0.3)',\r\n                                   color: '#fff',\r\n                                   fill: true,\r\n                              },\r\n                         ],\r\n                    }}\r\n               />\r\n          ) : null\r\n     );\r\n\r\n     const barChart= (\r\n          confirmed ? (\r\n               <Bar \r\n               data={ {\r\n               labels:['Infected', ' Recovered', 'Deaths'],\r\n               datasets:[{\r\n                    label:'People',\r\n                    backgroundColor: ['#4a8b9e', '#559e4a', '#9e4a4a'],\r\n                    data: [confirmed.value, recovered.value, deaths.value ]\r\n               }]\r\n          } }\r\n          option={{\r\n               title: { display: true, text:`Current state in ${country}`}\r\n          }}\r\n          \r\n          /> ) : null\r\n     )\r\n     if ({ country }== null){\r\n          // console.log('hello');\r\n          \r\n     }\r\n     // console.log(({country}));\r\n     return (\r\n          <div className={'contaier'}>\r\n               {/* {barChart} */}\r\n               {country ? barChart : lineChart}\r\n              \r\n          </div>\r\n          \r\n     );\r\n};\r\n\r\nexport default Chart;","import React, {useState, useEffect}  from 'react'\r\nimport { fetchCountry } from '../api'\r\nimport { FormControl, NativeSelect, InputLabel} from '@material-ui/core';\r\nimport styles from './Country-module.css'\r\n\r\n\r\nconst Country = ({ handleCountryChange }) => {\r\n     // const  =props\r\n     \r\n     const [fetchCountries, setFetchCountries] = useState([]);\r\n     \r\n     useEffect(() => {\r\n          const fetchCountries__func=  async ()=>{\r\n               setFetchCountries(await fetchCountry());\r\n          }\r\n          \r\n          fetchCountries__func();\r\n          \r\n          \r\n     }, []);\r\n     \r\n     return (\r\n          <div>  \r\n          <h1 className={'covid--header'}>Covid-19 Tracker</h1>\r\n          <article className={'form-group'}>\r\n          \r\n          <FormControl >\r\n          <InputLabel htmlFor=\"age-native-simple\">Select Country</InputLabel>\r\n          <NativeSelect\r\n          labelid=\"demo-simple-select-label\"\r\n          id=\"demo-simple-select\"\r\n          onChange={(e)=>handleCountryChange(e.target.value)}\r\n          >  \r\n          <option value=\"\" defaultValue>Global</option>\r\n          {fetchCountries.map((country,i)=> <option key={i} value={country}>{country}</option>)}\r\n         \r\n          </NativeSelect>\r\n           <span className=\"material-icons\">\r\n          unfold_more\r\n          </span>\r\n          </FormControl>\r\n          </article>\r\n          </div>\r\n          \r\n          );\r\n     }\r\n     \r\n     export default Country;","import React from 'react'\r\n\r\nconst Footer= ()=>{\r\n     return(\r\n          <footer>\r\n              <p> &copy; <a href='https://anjitpariyar.com.np' target=\"_blank\">Anjit Pariyar</a></p>\r\n          </footer>\r\n     )\r\n}\r\nexport default Footer","import React from 'react';\nimport './App.css';\nimport { Cards, Chart, Country } from './component'\nimport Footer from './component/Footer'\nimport {fetchData} from './component/api'\nimport styles from './App.module.css'\nimport { Container } from '@material-ui/core'\n\n\n\n\nclass App extends React.Component{\n  state = {\n    data:{ },\n    country:{ },\n  }\n\n  async componentDidMount(){\n    const data = await fetchData();\n    this.setState({ data });\n  }\n  \n  handleCountryChange =async(country)=>{\n\n    const data = await fetchData(country);\n    this.setState({data: data, country: country}); \n    if(country===' '){\n      this.setState({country: null})\n    }\n    else\n    console.log('hello')\n\n  }\n  \n  \n  \n  render(){\n    const {data, country} =this.state;\n    return (\n      <div className=\"App\">\n      <main className={styles.main_part}> \n      <Container>\n        <Country handleCountryChange={this.handleCountryChange} />\n        <Cards data={data}/>\n        \n        <Chart data={data} country={country} value={0}/>\n        <Footer />\n      </Container>\n      \n      \n      </main>\n      \n      </div>\n      );\n    }\n  }\n  \n  \n  \n  export default App;\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3lMzq\"};"],"sourceRoot":""}